@page "/"
@using System.Security.Claims
@using Domain.Entities
@using Domain.ViewModel
@using ApplicationServices.Business.Services.IServices
@using Newtonsoft.Json;
@using System.Text;
@using Microsoft.AspNetCore.Http
@inject HttpClient Http
@inject IHttpContextAccessor HttpContextAccessor
@inject IFicheService ficheService
<style>
    [type="checkbox"]
{
    vertical-align:middle;
}
</style>
@if (model == null)
{
    <p><em>@msg</em></p>
}
else
{

    <br>
    <br>
    <EditForm Model="@model" OnValidSubmit="@EditFinch">

        <input type="text" @bind="@model.fiche.Nom" class="form-control" placeholder="Nom du candidat">
        <input type="text" @bind="@model.fiche.Prenom" class="form-control" placeholder="Candidate first name">
        <label>Activite Type Table</label>
        <label class="checkbox-inline">

            @if (model.activiteType != null)
            {
                foreach (var item in model.activiteType)
                {

                    var Text = item.Libelle;//TextField?.Invoke(item.Libelle);
                    var Value = item.Id;//ValueField?.Invoke(item.Id).ToString();
                    bool Checked = false;
                    //if (SelectedValues.Contains(Value))
                    //{
                    //    Checked = true;
                    //}
                    <input type="checkbox" checked=@Checked value="@Text" />
                    @Text
                }
            }
        </label>
        <br />
        <label>Concerne :</label>
        <label class="checkbox-inline">

            @if (model.concerne != null)
            {
                foreach (var item in model.concerne)
                {

                    var Text = item.Libelle;
                    var Value = item.Id;
                    bool Checked = false;
                    @*<input type="checkbox" checked=@Checked
                @onchange="eventArgs => { CheckboxClicked(Value, eventArgs.Value); }" />*@
                    <input type="checkbox" checked=@Checked value="@Text" />
                    @Text
                }
            }
        </label>
        <br />
        <label>Titre/nature de l’activité </label>
        <select class="form-control selectpicker" @onchange="dropdownChanged">
            <option>--select--</option>
            @foreach (var item in model.activite)
            {
                <option value="@item.Souscription">@item.Souscription</option>//@onchange="eventArgs => { CheckboxClicked(item.Souscription, eventArgs.Value); }"
                // Blazor needs to know what values it binds to!
            }
        </select>
        <br />
        <label><strong>Type de contrat :</strong></label>
        <br />
        <label>Assurance de personnes </label>
        <label class="checkbox-inline">

            @if (model.assurancePersonne != null)
            {
                foreach (var item in model.assurancePersonne)
                {

                    //var Text = item.Libelle;
                    //var Value = item.Id;
                    bool Checked = false;

                    if (item.Libelle.Equals("santé"))
                    {
                        <input disabled="@health" type="checkbox" checked=@Checked value="item.Libelle" />
                        @item.Libelle
                    }
                    else if (item.Libelle.Equals("Prévoyance"))
                    {
                        <input disabled="@Foresight" type="checkbox" checked=@Checked value="item.Libelle" />
                        @item.Libelle
                    }
                    else
                    {
                        <input disabled type="checkbox" checked=@Checked value="item.Libelle" />
                        @item.Libelle
                    }

                }
            }
        </label>
        <br />
        <label>Assurance de Dommages</label>
        <label class="checkbox-inline">

            @if (model.assuranceDommage != null)
            {
                foreach (var item in model.assuranceDommage)
                {
                    var Text = item.Libelle;
                    var Value = item.Id;
                    bool Checked = false;
                    <input disabled type="checkbox" checked=@Checked value="@Text" />
                    @Text
                }
            }
        </label>
        <br />
        
        @*<label>Activities Table</label>
        <input type="text" @bind="@model.activite.Souscription" class="form-control" placeholder="Souscription">
        <input type="text" @bind="@model.activite.Autre" class="form-control" placeholder="Autre">
        <br />
        <label>Activite Type Table</label>
        <input type="text" @bind="@model.activiteType.Libelle" class="form-control" placeholder="Libelle">
        <br />
        <label>Assurance Dommage Table</label>
        <input type="text" @bind="@model.assuranceDommage.Autre" class="form-control" placeholder="Autre">
        <input type="text" @bind="@model.assuranceDommage.Libelle" class="form-control" placeholder="Libelle">
        <br />
        <label>Assurance Personne Table</label>
        <input type="text" @bind="@model.assurancePersonne.Libelle" class="form-control" placeholder="Libelle">
        <input type="text" @bind="@model.assurancePersonne.Autre" class="form-control" placeholder="Autre">
        <br />
        <label>Concerne Personne Table</label>
        <input type="text" @bind="@model.concerne.Libelle" class="form-control" placeholder="Libelle">
        <br />
        <label>Contrats Portefeuille Table</label>
        <input type="text" @bind="@model.contratsPortefeuille.Type" class="form-control" placeholder="Type">
        <input type="text" @bind="@model.contratsPortefeuille.Garantie" class="form-control" placeholder="Garantie">
        <input type="Date" @bind="@model.contratsPortefeuille.DateSouscription" class="form-control" placeholder="Date">
        <input type="text" @bind="@model.contratsPortefeuille.CotisationAnnuelle" class="form-control" placeholder="Cotisation Annuelle">
        <input type="text" @bind="@model.contratsPortefeuille.Autre" class="form-control" placeholder="Autre">
        <br />
        <label>Description Activite Table</label>
        <input type="text" @bind="@model.descriptionActivite.ContactOrigine" class="form-control" placeholder="Contact Origine">
        <input type="text" @bind="@model.descriptionActivite.ContactFaceAFace" class="form-control" placeholder="Contact FaceAFace">
        <input type="text" @bind="@model.descriptionActivite.ContactTelephone" class="form-control" placeholder="Contact Telephone">
        <input type="text" @bind="@model.descriptionActivite.ContactRole" class="form-control" placeholder="Contact Role">
        <input type="text" @bind="@model.descriptionActivite.EntretienObjectifs" class="form-control" placeholder="Entretien Objectifs">
        <input type="text" @bind="@model.descriptionActivite.EntretienDeroulement" class="form-control" placeholder="Entretien Deroulement">
        <br />
        <label>Fiche Client Prospect Table</label>
        <input type="text" @bind="@model.ficheClientProspect.Nom" class="form-control" placeholder="Nom">
        <input type="text" @bind="@model.ficheClientProspect.Prenom" class="form-control" placeholder="Prenom">
        <input type="text" @bind="@model.ficheClientProspect.Sexe" class="form-control" placeholder="Sexe">
        <input type="number" @bind="@model.ficheClientProspect.Age" class="form-control" placeholder="Age">
        <input type="text" @bind="@model.ficheClientProspect.Adresse" class="form-control" placeholder="Adresse">
        <input type="number" @bind="@model.ficheClientProspect.CodePostal" class="form-control" placeholder="CodePostal">
        <input type="text" @bind="@model.ficheClientProspect.Ville" class="form-control" placeholder="Ville">
        <input type="number" @bind="@model.ficheClientProspect.Telephone" class="form-control" placeholder="Telephone">
        <input type="number" @bind="@model.ficheClientProspect.Mobile" class="form-control" placeholder="Mobile">
        <input type="text" @bind="@model.ficheClientProspect.Mail" class="form-control" placeholder="Mail">
        <input type="text" @bind="@model.ficheClientProspect.Autre" class="form-control" placeholder="Autre">
        <input type="text" @bind="@model.ficheClientProspect.SituationFamiliale" class="form-control" placeholder="SituationFamiliale">
        <input type="text" @bind="@model.ficheClientProspect.NbEnfants" class="form-control" placeholder="NbEnfants">
        <input type="number" @bind="@model.ficheClientProspect.AgesEnfants" class="form-control" placeholder="AgesEnfants">
        <input type="text" @bind="@model.ficheClientProspect.SituationProfessionnelle" class="form-control" placeholder="SituationProfessionnelle">
        <input type="checkbox" @bind="@model.ficheClientProspect.IsClient" class="form-control" placeholder="IsClient">
        <input type="text" @bind="@model.ficheClientProspect.Statut" class="form-control" placeholder="Statut">
        <input type="number" @bind="@model.ficheClientProspect.AgesEnfants" class="form-control" placeholder="AgesEnfants">
        <input type="text" @bind="@model.ficheClientProspect.Anciennete" class="form-control" placeholder="Anciennete">
        <input type="text" @bind="@model.ficheClientProspect.Revenus" class="form-control" placeholder="Revenus">
        <input type="text" @bind="@model.ficheClientProspect.TauxImposition" class="form-control" placeholder="TauxImposition">
        <input type="text" @bind="@model.ficheClientProspect.Placements" class="form-control" placeholder="Placements">
        <br />
        <label>Fiche Fin Table</label>
        <input type="text" @bind="@model.ficheFin.InformationsAConserver" class="form-control" placeholder="InformationsAConserver">
        <input type="text" @bind="@model.ficheFin.PlanificationActions" class="form-control" placeholder="PlanificationActions">
        <input type="text" @bind="@model.ficheFin.AutoEvaluation" class="form-control" placeholder="AutoEvaluation">
        <label>Phases Table</label>
        <input type="text" @bind="@model.phase.PhaseContact" class="form-control" placeholder="PhaseContact">
        <input type="text" @bind="@model.phase.PhaseDecouverte" class="form-control" placeholder="PhaseDecouverte">
        <input type="text" @bind="@model.phase.PhaseTransition" class="form-control" placeholder="PhaseTransition">
        <input type="text" @bind="@model.phase.PhaseVente" class="form-control" placeholder="PhaseVente">
        <input type="text" @bind="@model.phase.PhaseConclusion" class="form-control" placeholder="PhaseConclusion">
        <input type="text" @bind="@model.phase.PhaseAsseoirVente" class="form-control" placeholder="PhaseAsseoirVente">
        <input type="text" @bind="@model.phase.PhasePriseConge" class="form-control" placeholder="PhasePriseConge">*@

        <button type="submit">Save</button>
    </EditForm>
}


@code {
    // The field to be shown adjacent to checkbox  
    //[Parameter] public Func<TItem, string> TextField { get; set; }  
    //// The Value which checkbox will return when checked   
    //[Parameter] public Func<TItem, object> ValueField { get; set; } 

    public IEnumerable<Fiches> ficheList { get; set; }
    public ApplicationUser applicationUser { get; set; }
    public Activites activite { get; set; }
    public IEnumerable<ActiviteTypes> activiteType { get; set; }
    public AssurancesDommage assuranceDommage { get; set; }
    public AssurancesPersonne assurancePersonne { get; set; }
    public IEnumerable<Concernes> concerne { get; set; }
    public ContratsPortefeuilles contratsPortefeuille { get; set; }
    public DescriptionsActivite descriptionActivite { get; set; }
    public FichesClientProspect ficheClientProspect { get; set; }
    public FichesContexteSimplifiee ficheContexteSimplifiee { get; set; }
    public FichesFin ficheFin { get; set; }
    public Phases phase { get; set; }
    public Fiches fiche { get; set; }
    public MainViewModel model { get; set; }
    public string NumeroFiche { get; set; }
    public string msg { get; set; }
    public bool health { get; set; } = true;
    public bool Foresight { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        var principal = HttpContextAccessor.HttpContext.User;
        var loggedInUserId = principal.FindFirstValue(ClaimTypes.NameIdentifier);
        //fiche = new IEnumerable<Fiche>();
        if (loggedInUserId != null)
        {
            try
            {
                model = (await ficheService.GetAllFichesInViewModel(loggedInUserId));
                //fiche = ficheList.FirstOrDefault(x => x.StudentId == loggedInUserId);
                //NumeroFiche = "Document No. " + fiche.NumeroFiche;
                //Set Models
                //activite = fiche.Activites.FirstOrDefault();

                //activiteType = model.activiteType.ToList();
                //concerne = model.concerne.ToList();

                //applicationUser.Nom = model.Nom;
                //applicationUser.Prenom = model.Prenom;
                //assuranceDommage = fiche.AssurancesDommage.FirstOrDefault();
                //assurancePersonne = fiche.AssurancesPersonne.FirstOrDefault();
                //concerne = fiche.Concernes.FirstOrDefault();
                //contratsPortefeuille = fiche.ContratsPortefeuilles.FirstOrDefault();
                //descriptionActivite = fiche.DescriptionsActivite.FirstOrDefault();
                //ficheClientProspect = fiche.FichesClientProspect.FirstOrDefault();
                //ficheContexteSimplifiee = fiche.FichesContexteSimplifiee.FirstOrDefault();
                //ficheFin = fiche.FichesFin.FirstOrDefault();
                //phase = fiche.Phases.FirstOrDefault();
                await base.OnInitializedAsync();
            }
            catch (Exception ex)
            {
                msg = "Something went wrong";
            }

        }
        else
        {
            msg = "Please sign in";
        }
    }
    async Task EditFinch()
    {

        try
        {
            //CommandResponse response;
            //model.activite = activite;
            //await  Http.SendJsonAsync(HttpMethod.Post, "https://localhost:44376/api/Fiches/Update", model);
            //var serialized = JsonConvert.SerializeObject(model);
            //var stringContent = new StringContent(serialized, Encoding.UTF8, "application/json");
            //await Http.PostAsync("https://localhost:44376/api/Fiches/Update", stringContent);
            //var request = new CommandRequest() //{RequestNumber = 3};
            //var test = Storage.GetItem("environment_uri") + "/api/Fiches/Update";
            //await Http.SendJsonAsync(HttpMethod.Post,  "https://localhost:44376/api/Fiches/Update", model);
            await Http.SendJsonAsync(HttpMethod.Put, "https://localhost:44376/api/Fiches/" + model.fiche.Id, model);
            //await Http.SendJsonAsync<MainViewModel>(HttpMethod.Post, "api/Fiches/Update", model);
        }
        catch (Exception ex)
        {

        }

    }
    public void dropdownChanged(ChangeEventArgs e)
    {
        string selectedString = e.Value.ToString();
        if (selectedString.Equals("Santé du particulier") || selectedString.Equals("Santé collective")){
            health = false;
            Foresight = true;
        }else if (selectedString.Equals("Prévoyance décès") || selectedString.Equals("Prévoyance collective"))
        {
            Foresight = false;
            health = true;
        }
        else
        {
            Foresight = true;
            health = true;
        }

    }
    //Method to update the selected value on click on checkbox   
    public void CheckboxClicked(string aSelectedId, object aChecked)
    {
        if ((bool)aChecked)
        {
            //if (!SelectedValues.Contains(aSelectedId))
            //{
            //    SelectedValues.Add(aSelectedId);
            //}
        }
        else
        {
            //if (SelectedValues.Contains(aSelectedId))  
            //{  
            //    SelectedValues.Remove(aSelectedId);  
            //}  
        }
        StateHasChanged();
    }
}

